from django.db import models
from django.contrib.auth.models import User

    

# Create your models here.
# Register your model(s) with the admin.py
# make and run migrations

# passing in models.Model turns our call into a model so now django understands what it is.
class Product(models.Model):
# A user can have multiple products so we use ForeignKey method on our model to represent this relationship
# on_delete=models.SET_NULL allow a user to be deleted but their products will not
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    name = models.CharField(max_length=200, null=True, blank=True)
    image = models.ImageField(null=True, blank=True)
    brand = models.CharField(max_length=200, null=True, blank=True)
    category = models.CharField(max_length=200, null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    rating = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    numReviews = models.IntegerField(null=True, blank=True, default=0)
    price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    countInStock = models.IntegerField(null=True, blank=True, default=0)
    createdAt = models.DateTimeField(auto_now_add=True)
# below sets _id to the autogenerated id that given to newly added projects.
    _id = models.AutoField(primary_key=True, editable=False)
    
    # string representation of the Review model (in django admin panel)
    def __str__(self):
        return self.name
    

class Review(models.Model):
    #a product can have multiple reviews so as above we link this relationship with models.ForeignKey
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    name = models.CharField(max_length=200, null=True, blank=True)
    rating = models.IntegerField(null=True, blank=True, default=0)
    comment = models.TextField(null=True, blank=True)
    _id = models.AutoField(primary_key=True, editable=False)
    
    def __self__(self):
        return str(self.rating)

    
class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    paymentMethod = models.CharField(max_length=200, null=True, blank=True)
    taxPrice = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    shippingPrice = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    totalPrice = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    isPaid = models.BooleanField(default=False)
    # this is set to false because we dont want to update this until we actuall update the value
    paidAt = models.DateTimeField(auto_now_add=False, null=True, blank=True)
    isDelivered = models.BooleanField(default=False)
    deliveredAt=  models.DateTimeField(auto_now_add=False, null=True, blank=True)
    createdAt =  models.DateTimeField(auto_now_add=True,)
    _id = models.AutoField(primary_key=True, editable=False)
    
    def __self__(self):
        return str(self.createdAt)
    
    
# an OrderItem will have a relationship with a Order and a Product
class OrderItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True)
    name = models.CharField(max_length=200, null=True, blank=True)
    qty = models.IntegerField(null=True, blank=True, default=0)
    price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    image = models.CharField(max_length=200, null=True, blank=True)
    # character field used here - image will point to a URL 
    _id = models.AutoField(primary_key=True, editable=False)
    
    def __self__(self):
        return str(self.name)
    
    
class ShippingAddress(models.Model):
    # an order can only have one shipping address so this needs to be a 1 to 1 relationship 
    # to represent this relationship we use the OneToOneFiled method and pass in the Order model.
    #if an order is deleted the CASCADE method used on the model will also delete the shipping address.
    order = models.OneToOneField(Order, on_delete=models.CASCADE, null=True, blank=True)
    address = models.CharField(max_length=200, null=True, blank=True)
    city = models.CharField(max_length=200, null=True, blank=True)
    postalCode = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    country = models.CharField(max_length=200, null=True, blank=True)
    shippingPrice = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)
    _id = models.AutoField(primary_key=True, editable=False)
    
    def __str__(self):
        return str(self.address)
    
    
  
    
    
    # Anthony Please go back and add notes on on_delete=models.SET_NULL
    
    
    
    
    




